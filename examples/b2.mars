fn quick_sort(arr: Vec<i64>) -> Vec<i64> {
    var l = vector_len_i64(arr);
    if l <= 1 {
        return arr;
    }


    var pivot = arr[0];
    var left: Vec<i64> = [];
    var right: Vec<i64> = [];

    var i: i64 = 1;
    while i < l {
        if arr[i] < pivot {
            vector_push_i64(left, arr[i]);
        } else {
            vector_push_i64(right, arr[i]);
        }
        i += 1;
    }

    var result = quick_sort(left);
    vector_push_i64(result, pivot);
    var rightRes = quick_sort(right);

    i = 0;
    while i < vector_len_i64(rightRes) {
        vector_push_i64(result, rightRes[i]);
        i += 1;
    }

    return result;
}

fn main() -> i64 {
    var start = now();

    var arr: Vec<i64> = [3, 6, 8, 10, 1, 2, 1];
    var sorted = quick_sort(arr);


    var i = 0;
    while i < vector_len_i64(sorted) {
        print_i64(sorted[i]);
        println("");
        i += 1;
    }

    var timeSpend = now() - start;
    print("Elapsed: ");
    print_i64(timeSpend);
    println("");

    return 0;
}