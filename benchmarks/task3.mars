fn sieveOfEratosthenes(n: i64) -> Vec<i64> {
    var primes: Vec<bool> = [];
    var i: i64 = 0;
    while i <= n {
        push(primes, true);
        i = i + 1;
    }

    primes[0] = false;
    primes[1] = false;

    i= 2;
    while i * i <= n {
        if primes[i] == true {
            var j: i64 = i * i;
            while j <= n {
                primes[j] = false;
                j = j + i;
            }
        }
        i = i + 1;
    }

    var result: Vec<i64> = [];
    var k: i64 = 0;
    while k <= n {
        if primes[k] == true {
            push(result, k);
        }
        k = k + 1;
    }

    return result;
}

fn main() -> void {
    var n: i64 = 50;
    var primes: Vec<i64> = sieveOfEratosthenes(n);
    printl("Простые числа до " + n + ": " + primes);
}
