// Mars programming language (.mars ?)
// C lang simple featureless clone, rust-like look

// primitives
    void
    bool
    char
    f64
    i64
    
    [type; size]    // array

    // temporarily refusing
    &_              // mut ptr
    &i32  &MemorySth

// variables

    var x: i32 = 0
    var arr: [i32; 3] = [4; 3]      // [4, 4, 4]
    var ara: [i32; 3] = [1, 2, 3]   // [1, 2, 3]
    var str: str = "hello"
    
// operations

    // appropriate
    =

    // deref (temporarily refusing)
    *

    // math
    +
    -
    *
    /
    //
    %
    **

    // comparison
    ==
    !=
    <=
    >=
     >
     <

// structs

struct Hello {
    hello: i64,
    sth_else: f64,
}

var hello = Hello { hello: 0, sth_else: 0.0, }


// functions

fn min(a: i32, b: i32) -> i32 {
    if a < b {
        return a;
    } else {
        return b;
    }
}

fn overflow_sum(start: i32) -> i64 {
    return overflow_sum(start + 1);
}

// main()

fn main() -> void {

}

// loops

base: 
    while x + 10 < y {
        if x == y { break }
        else { continue }
    }
    
// output

var a = 10
var c = 'h'
print("base string" + "digit: " + a + " and char: " + c)


fn pow(base: f64, exp: f64) -> f64 {
    result = 1
    if exp < 0 {
        base = 1 / base
        exponent = -exp
    }

    for (var i = 0; i < exp; i = i + 1) {
        result = result * base;
    }

    return result;
}

fun modulo(dividend: i64, divisor: i64) -> f64 {
    var quotient = dividend / divisor;
    return dividend - (quotient * divisor);
}