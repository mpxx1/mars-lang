program   = _{ SOI ~ ( prog_stmt )* ~ EOI }
prog_stmt = _{ NEWLINE | comment | struct_decl | func_decl }

stmt      = _{
    ( "{" ~ block ~ "}" )
  | NEWLINE
  | break
  | return
  | comment
  | struct_decl
  | func_decl
  | assignment
  | assign
  | ( func_call ~ ";")
  | if_else
  | loop
}

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

break = { "break" ~ ";"? }

comment            = _{ multi_line_comment }
multi_line_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

resurved =   _{ "i64" | "f64" | "u8" | "str" | "char" | "bool" | "fn" | "size" | "null" | "if" |
                "else" | "while" | "for" | "loop" | "false" | "var" | "struct" | "break" | "as" |
                "const" | "true" | "Vec" | "String" | "self" }
identifier = @{
    !resurved ~ "_"? ~ ASCII_ALPHA ~ ( "_" | ASCII_ALPHANUMERIC )*
}
literal    =  { flt_decl | int_decl | char_decl | str_decl | bool_decl | null_decl }
block      =  { stmt* }
type       = _{
//    ref_type
    i64_type
  | f64_type
  | str_type
  | char_type
  | bool_type
  | void_type
  | custom_type
  | array_type
  | vec_type
}
args_decl    =  { (arg_decl ~ ",")* ~ (arg_decl)? }
arg_decl     =  { identifier ~ ":" ~ type }

flt_decl     = @{ ("-"? ~ (ASCII_DIGIT)+ ~ "." ~ (ASCII_DIGIT)* ) | num_exp_decl }
int_decl     = @{ ("-"? ~ (ASCII_DIGIT)+) }
num_exp_decl = @{ "-"? ~ (ASCII_DIGIT)+ ~ "e" ~ "-"? ~ (ASCII_DIGIT)+ }
str_decl     = @{ "\"" ~ inner ~ "\"" }
char_decl    = @{ "'" ~ char ~ "'" }
bool_decl    = @{ "true" | "false" }
null_decl    = @{ "null" }

array_decl = { "[" ~ (expr ~ ",")* ~ (expr)? ~ "]" }
mem_lookup = { identifier ~ ( "[" ~ expr ~ "]" )+ }
array_len  = { (ASCII_DIGIT)+ }

inner = @{ char* }
char  =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

i64_type    = { "i64" }
f64_type    = { "f64" }
str_type    = { "str" }
char_type   = { "char" }
bool_type   = { "bool" }
void_type   = { "void" }
custom_type = { identifier }
array_type  = { "[" ~ type ~ ";" ~ array_len ~ "]" }
ref_type    = { "&" ~ type }
vec_type   =  { "Vec" ~ "<" ~ type ~ ">" }

func_decl   = { "fn" ~ identifier ~ "(" ~ args_decl ~ ")" ~ "->" ~ return_type ~ "{" ~ block ~ "}" }
return_type = { type }

struct_decl = { "struct" ~ identifier ~ "{" ~ args_decl ~ "}" }

assignment = { "var" ~ identifier ~ (":" ~ type)? ~ "=" ~ expr ~ ";" }
assign = {
    assign_lh ~ assign_op ~ assign_rh ~ ";"
}
assign_lh = _{ mem_lookup | identifier }
assign_rh = _{ expr }

assign_op        = { assign_pow | assign_div_floor | assign_mod |
                     assign_div | assign_mul | assign_sub | assign_add |
                     assign_base }

assign_base      = { "=" }
assign_add       = { "+=" }
assign_sub       = { "-=" }
assign_mul       = { "*=" }
assign_div       = { "/=" }
assign_mod       = { "%=" }
assign_div_floor = { "//=" }
assign_pow       = { "**=" }

expr = _{
//    reference
  | array_decl
  | struct_init
  | logical_expr
}

return = { "return" ~ return_body ~ ";" }
return_body = { ( expr )? }

ref_inner   = _{ mem_lookup | struct_field_call | identifier | "(" ~ ref_inner ~ ")" }
reference   =  { "&" ~ ref_inner }
dereference =  { "*" ~ ref_inner }

cast_type = { "(" ~ type ~ ")" ~ expr }

struct_init       = { identifier ~ "{" ~ struct_init_args ~ "}" }
struct_init_args  = { (struct_init_arg ~ ",")* ~ (struct_init_arg)? }
struct_init_arg   = { identifier ~ ":" ~ expr }
struct_field_call = { identifier ~ "." ~ identifier }

func_call         = { identifier ~ "(" ~ func_args_to_call ~ ")"  }
func_args_to_call = { (expr ~ ",")* ~ (expr)? }

condition = _{ logical_expr }
if_else   = {
    "if" ~ condition ~ "{" ~ block ~ "}" ~
    ("else" ~ "{" ~ block ~ "}")?
}

loop       = _{ while_loop }
while_loop =  { "while" ~ condition ~ "{" ~ block ~ "}" }

or_op        = { "||" }
and_op       = { "&&" }
equal_op     = { "==" }
not_equal_op = { "!=" }
more_eq_op   = { ">=" }
less_eq_op   = { "<=" }
more_op      = { ">" }
less_op      = { "<" }

add_op       = { "+" }
sub_op       = { "-" }
mul_op       = { "*" }
div_op       = { "/" }
mod_op       = { "%" }
div_floor_op = { "//" }
pow_op       = { "**" }
not_op       = { "!"  }

logical_expr         = { logical_or_expr }
logical_or_expr      = { logical_and_expr ~ (or_op ~ logical_and_expr)* }
logical_and_expr     = { logical_not_expr ~ (and_op ~ logical_not_expr)* }
logical_not_expr     = { not_op? ~ primary_logical_expr }
comparison_expr      = { math_expr ~ (more_eq_op | less_eq_op | equal_op | not_equal_op | more_op | less_op) ~ math_expr }
primary_logical_expr = { comparison_expr | math_expr | "(" ~ logical_expr ~ ")" }

math_expr            = { additive_expr }
additive_expr        = { multiplicative_expr ~ ((add_op | sub_op) ~ multiplicative_expr)* }
multiplicative_expr  = { power_expr ~ ((div_floor_op | mul_op | div_op | mod_op) ~ power_expr)* }
power_expr           = { primary_math_expr ~ (pow_op ~ primary_math_expr)* }
primary_math_expr    = { func_call | mem_lookup | cast_type | struct_field_call | identifier | literal | "(" ~ math_expr ~ ")" }