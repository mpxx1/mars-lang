fn sieveOfEratosthenes(n: i64) -> Vec<i64> {
    var primes: Vec<i64> = [];
    var i: i64 = 0;
    while i <= n {
        vector_push_i64(primes, 1);
        i += 1;
    }

    primes[0] = 0;
    primes[1] = 0;

    i = 2;
    while i * i <= n {
        if primes[i] == 1 {
            var j = i * i;
            while j <= n {
                var k = j + 1;
                primes[j] = 0;
                j += i;
            }
        }
        i += 1;
    }

    var result: Vec<i64> = [];
    var k: i64 = 0;
    while k <= n {
        if primes[k] == 1 {
            vector_push_i64(result, k);
        }
        k += 1;
    }

    return result;
}

fn main() -> i64 {
    var primes: Vec<i64> = sieveOfEratosthenes(10000);

    var i = 0;
    while i < vector_len_i64(primes) {
        print_i64(primes[i]);
        println("");
        i += 1;
    }

    return 0;
}
